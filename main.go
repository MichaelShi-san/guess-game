package main

import (
	"fmt"
	"math/rand"
	"strconv"
	"time"

	"github.com/fatih/color"
)

func getNumberInput() (int, error) {
		var input string
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ")
		fmt.Scanln(&input)

		num, err := strconv.Atoi(input)
		if err != nil {
			return 0, fmt.Errorf("–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
		}

		return num, nil
	}

	func getHint(number, guess int) string {
					diff := number - guess
			if diff < 0 {
			diff = -diff
			}
			switch {
			case diff <= 5:
				return "üî• –ì–æ—Ä—è—á–æ"
			case diff <= 15:
				return "üôÇ –¢–µ–ø–ª–æ"
			default:
				return "ü•∂ –•–æ–ª–æ–¥–Ω–æ"
			}
		
	}
func guess() {
	fmt.Println("–ò–≥—Ä–∞–π —É–≥–∞–¥–∞–π —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100")
	fmt.Println("–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫!")
	var number int
	var maxNumber int
	rand.Seed(time.Now().UnixNano())
	number = rand.Intn(100) + 1
	var tries int
	var difficulty int
	fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
	fmt.Println("1 - Easy (1‚Äì50, 15 –ø–æ–ø—ã—Ç–æ–∫)")
	fmt.Println("2 - Medium (1‚Äì100, 10 –ø–æ–ø—ã—Ç–æ–∫)")
	fmt.Println("3 - Hard (1‚Äì200, 5 –ø–æ–ø—ã—Ç–æ–∫)")
	fmt.Scanln(&difficulty)
			switch difficulty{
		case 1:
			maxNumber = 50
			number = rand.Intn(maxNumber) + 1
			tries = 15
		case 2:
			maxNumber = 100
			number = rand.Intn(maxNumber) + 1
			tries = 10
		case 3:
			maxNumber = 200
			number = rand.Intn(maxNumber) + 1
			tries = 5
		default:
			fmt.Errorf("–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
			return
		}

	for tries > 0 {

		guess, err := getNumberInput()

		if guess < 1 || guess > maxNumber {
			fmt.Printf("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ %d\n", maxNumber)
			continue
		}

		if err != nil {
			fmt.Println(err)
			continue
		}

		if guess > number {
			fmt.Println("–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µüëá")
			fmt.Println(getHint(number, guess))
			tries--
		} else if guess < number {
			fmt.Println("–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µüëÜ")
			fmt.Println(getHint(number, guess))
			tries--
		} else {
			color.Green("–ü–æ–∑—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ! –ù–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –∏–≥—Ä–∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç, –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.")
			break
		}
		if tries == 0 {
			color.Red("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –û—á–µ–Ω—å –∂–∞–ª—å.")
			break
		} else if guess > 100 || guess < 1 {
			fmt.Println("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–∏ÃÜ—Ç–µ –µ—â–µ —Ä–∞–∑.")
		} 
	}
}

func main() {
	for {
		guess()
	var again string
	fmt.Print("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ? (y/n): ")
		fmt.Scanln(&again)
		if again == "y" || again == "Y" || again == "–¥" || again == "–î" {
			main()
		} else if again == "n" || again == "–Ω" || again == "–ù" || again == "N" {
			fmt.Println("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
			break
		} else if again != "y" && again != "Y" && again != "–Ω" && again != "–ù" {
			fmt.Println("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É.")
		}
	}
}